#+title: Stuck in a Rut
#+startup: overview hideblocks latexpreview

* Problem Statement
\(N\) cows (\(1\le N\le 50\)) graze on a farm. Cows think of the farm as a 2D grid of cells (think chessboard), each filled with grass. Each cows starts out facing either north or east.

Every hour, each cow either
- Stops if the grass in her current cell has been eaten by another cow.
- Eats the grass in her cell and move forward according to her direction. If two cows happen to move onto the same cell, they may share the grass.

As they graze, each cow leaves a "rut" behind her. Some will eventually stop but some would graze infinitely many cells.

Determine the number of cells each cow could eat. Print "Infinite" if the cow does not stop.
* Format
#+name: Format
#+begin_src conf
N
# for the next N lines
N/E x y
...
#+end_src
\(0\le x\le 10^9\), \(0\le y\le 10^9\)

#+name: Input
#+begin_src text
6
E 3 5
N 5 3
E 4 6
E 10 4
N 11 2
N 8 1
#+end_src

#+name: Output
#+begin_src text
5
3
Infinity
Infinity
2
5
#+end_src
* Observation

* Solution
Keep track of the position and direction of each cow and determine the next "collision" (a collision happens when a cow finds an eaten cell / hit a rut) by checking each cow against others to see which will stop the soonest. At each collision, stop the cow and fast forward time \(t\) to the next collision. We have the solution when there are no collisions left, i.e. all cows are either stopped or able to graze an infinite number of cells.

#+begin_src C++
#include <iostream>
using namespace std;

constexpr int INFINITY = 1000000001;

struct Cow {
    int time_stopped; // time at which stopped
    int x, y;         // current location
    char dir;       // N or E
};

int N;
Cow C[50];

// At what time would cow i hit the rut carved out by cow j and stop?  (INFINITY if no such event)
// (and this is only considering these two cows for the moment)
int when_hits(int i, int j, int current_time) {
    Cow I = C[i], J = C[j];
    if (I.dir == J.dir) return INFINITY; // never hits if moving same direction (or same cow)
    if (I.dir == 'E') { // assume without loss of generality that I is moving north, and J east
        swap (I.x, I.y); swap (J.x, J.y);
    }
    if (J.y <= I.y) return INFINITY; // J isn't north of I?
    if (J.time_stopped == INFINITY) {
        if (I.x < J.x - current_time || I.x >= J.x + J.y - I.y) return INFINITY; // No insersection, J still mooving
    } else {
        if (I.x > J.x || I.x < J.x - J.time_stopped) return INFINITY; // No intersection; j stopped already
    }
    return current_time + J.y - I.y;
}

// Returns the next time after current_time at which a cow hits a rut and stops  (or INFINITY if no such event)
// Also move cows forward until that time and update which cows are stopped
int advance_to_next_event(int current_time) {
    // T[i] is the next time something happens to cow i; minT is the earliest of these
    int T[50], minT = INFINITY;

    for (int i=0; i<N; i++) {
        T[i] = INFINITY;
        if (C[i].time_stopped == INFINITY) { // For all cows still mooving....
            for (int j=0; j<N; j++) {            // What does it hit next?
                int t = when_hits(i, j, current_time);
                if (t < T[i]) T[i] = t;
            }
            if (T[i] < minT) minT = T[i];
        }
    }

    if (minT == INFINITY) return INFINITY;

    // Advance cows, stopping those that hit a rut
    for (int i=0; i<N; i++) {
        if (C[i].time_stopped == INFINITY)
            if (C[i].dir == 'N') C[i].y += (minT - current_time);
            else                 C[i].x += (minT - current_time);
        if (T[i] == minT) C[i].time_stopped = minT;
    }

    return minT;
}

int main(void) {
    cin >> N;
    for (int i=0; i<N; i++) {
        cin >> C[i].dir >> C[i].x >> C[i].y;
        C[i].time_stopped = INFINITY;
    }

    // Now just advance from one "event" to another until done...
    int current_time = 0;
    do { current_time = advance_to_next_event(current_time); }
    while (current_time != INFINITY);

    for (int i=0; i<N; i++)
        if (C[i].time_stopped == INFINITY) cout << "Infinity\n";
        else                               cout << C[i].time_stopped << "\n";
}

#+end_src
